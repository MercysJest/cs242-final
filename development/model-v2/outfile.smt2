;############################ OPTIONS #############################

;
;############################### DATA TYPES ###############################
;
(declare-datatypes (T) ((Item Crash (mk-item (value T)))))
(declare-datatypes (T) ((Vector (mk-vec (size Int) (data (Array Int T))))))
(declare-datatypes (T) ((Packet (mk-pack (curr_idx Int) (prev_return (Item T))))))
;
;############################### CORE FUNCTIONS ###############################
;
(define-fun get_index_int ((vec (Item (Vector Int))) (index (Item Int))) (Item Int)
  (ite (or (= index (as Crash (Item Int))) (= vec (as Crash (Item (Vector Int))))) 
    (as Crash (Item Int)) 
    (ite (or (>= (value index) (size (value vec))) (< (value index) 0))
      (as Crash (Item Int))
      (mk-item (select (data (value vec)) (value index)))
    )
  )
)
(define-fun if_int ((condition (Item Bool)) (true_int (Item Int)) 
                    (false_int (Item Int))) (Item Int)
  (ite (or (= condition (as Crash (Item Bool))) 
        (= true_int (as Crash (Item Int))) (= false_int (as Crash (Item Int))))
    (as Crash (Item Int))
    (ite (value condition)
      true_int
      false_int
    )
  )
)
;For-loop definition is commented out to make model definitions pretty
;(define-fun-rec for_int ((status (Packet Int)) (body (Array (Item Int) (Item Int)))) (Packet Int) 
;  (ite (= (prev_return status) (as Crash (Item Int))) 
;    (mk-pack -1 (as Crash (Item Int)))
;    (ite (<= 0 (curr_idx status))
;     (for_int (mk-pack (- (curr_idx status) 1) (select body (prev_return status))) body)
;     status
;    )
;  )
;)
;
;############################### INT OPERATORS ###############################
;
(define-fun div_int ((dividend (Item Int)) (divisor (Item Int))) (Item Int)
  (ite (or (= dividend (as Crash (Item Int))) (= divisor (as Crash (Item Int))))
    (as Crash (Item Int))
    (ite (= (value divisor) 0)
      (as Crash (Item Int))
      (mk-item (div (value dividend) (value divisor)))
    )
  )
)
(define-fun mod_int ((dividend (Item Int)) (divisor (Item Int))) (Item Int)
  (ite (or (= dividend (as Crash (Item Int))) (= divisor (as Crash (Item Int))))
    (as Crash (Item Int))
    (ite (= (value divisor) 0)
      (as Crash (Item Int))
      (mk-item (mod (value dividend) (value divisor)))
    )
  )
)
(define-fun add_int ((term1 (Item Int)) (term2 (Item Int))) (Item Int)
  (ite (or (= term1 (as Crash (Item Int))) (= term2 (as Crash (Item Int))))
    (as Crash (Item Int))
    (mk-item (+ (value term1) (value term2)))
  )
)
(define-fun sub_int ((term1 (Item Int)) (term2 (Item Int))) (Item Int)
  (ite (or (= term1 (as Crash (Item Int))) (= term2 (as Crash (Item Int))))
    (as Crash (Item Int))
    (mk-item (- (value term1) (value term2)))
  )
)
(define-fun mult_int ((factor1 (Item Int)) (factor2 (Item Int))) (Item Int)
  (ite (or (= factor1 (as Crash (Item Int))) (= factor2 (as Crash (Item Int))))
    (as Crash (Item Int))
    (mk-item (* (value factor1) (value factor2)))
  )
)
;
;############################### INPUT SOLVER ###############################
;
(push)
(echo "############ PROGRAM 6 (ATTEMPTING TO FIND CRASH) ############")
(define-fun body_statement ((prev (Item Int)) (vec (Vector Int))) (Item Int)
  (get_index_int (mk-item vec) prev)
)
(define-fun-rec for_int ((status (Packet Int)) (vec (Vector Int))) (Packet Int) 
  (ite (= (prev_return status) (as Crash (Item Int))) 
    (mk-pack -1 (as Crash (Item Int)))
    (ite (<= 0 (curr_idx status))
     (for_int (mk-pack (- (curr_idx status) 1) (body_statement (prev_return status) vec)) vec)
     status
    )   
  )
)
(define-fun program_6 ((vec (Vector Int))) (Item Int)
  (prev_return (for_int (mk-pack 1 (mk-item 0)) vec))
)
(declare-const input (Vector Int))
(assert (= (size input) 7))
(assert (= (program_6 input) (as Crash (Item Int))))
(check-sat)
(get-model)
(pop)
;
(push)
(echo "############ PROGRAM 4 (ATTEMPTING TO FIND CRASH) ############")
(define-fun-rec for_int ((status (Packet Int)) (body (Array (Item Int) (Item Int)))) (Packet Int) 
  (ite (= (prev_return status) (as Crash (Item Int))) 
    (mk-pack -1 (as Crash (Item Int)))
    (ite (<= 0 (curr_idx status))
     (for_int (mk-pack (- (curr_idx status) 1) (select body (prev_return status))) body)
     status
    )   
  )
)
(declare-const input (Vector Int))
(define-fun body_statement ((prev (Item Int))) (Item Int)
  (get_index_int (mk-item input) prev)
)
(declare-const for_body (Array (Item Int) (Item Int)))
(define-fun program_4 () (Item Int)
  (prev_return (for_int (mk-pack 11 (mk-item 1)) for_body))
)
(assert (= (size input) 7))
(assert (forall ((inputs (Item Int))) (= (body_statement inputs) (select for_body inputs))))
(assert (= program_4 (as Crash (Item Int))))
(check-sat)
(get-model)
(pop)
;
(push)
(echo "############ PROGRAM 1 (ATTEMPTING TO FIND CRASH) ############")
(define-fun program_1 ((vec (Vector Int))) (Item Int)
  (get_index_int (mk-item vec) (get_index_int (mk-item vec) (mk-item 0)))
)
(declare-const input (Vector Int))
(assert (= (size input) 2))
(assert (forall ((idx Int)) (>= (select (data input) idx) 0)))
(assert (= (program_1 input) (as Crash (Item Int))))
(check-sat)
(get-model)
(pop)
;
(push)
(echo "############ PROGRAM 2 (ATTEMPTING TO FIND CRASH) ############")
(define-fun program_2 ((vec (Vector Int))) (Item Int)
  (div_int (get_index_int (mk-item vec) (mk-item 0)) 
           (get_index_int (mk-item vec) (mk-item 1))
  )
)
(declare-const input (Vector Int))
(assert (= (size input) 2))
(assert (forall ((idx Int)) (>= (select (data input) idx) 0)))
(assert (= (program_2 input) (as Crash (Item Int))))
(check-sat)
(get-model)
(pop)
;
(push)
(echo "############ PROGRAM 3 (ATTEMPTING TO FIND CRASH) ############")
(define-fun program_1 ((vec (Vector Int))) (Item Int)
  (if_int (mk-item false)
    (get_index_int (mk-item vec) (get_index_int (mk-item vec) (mk-item 0)))
    (get_index_int (mk-item vec) (get_index_int (mk-item vec) (mk-item 1)))
  )
)
(declare-const input (Vector Int))
(assert (= (size input) 2))
(assert (forall ((idx Int)) (>= (select (data input) idx) 0)))
(assert (= (program_1 input) (as Crash (Item Int))))
(check-sat)
(get-model)
(pop)
;
(push)
(echo "############ PROGRAM 5 (ATTEMPTING TO FIND CRASH) ############")
(declare-const input (Vector Int))
(define-fun body_statement ((prev (Item Int))) (Item Int)
  (get_index_int (mk-item input) prev)
)
(define-fun-rec for_int ((status (Packet Int))) (Packet Int) 
  (ite (= (prev_return status) (as Crash (Item Int))) 
    (mk-pack -1 (as Crash (Item Int)))
    (ite (<= 0 (curr_idx status))
     (for_int (mk-pack (- (curr_idx status) 1) (body_statement (prev_return status))))
     status
    )   
  )
)
(define-fun program_5 () (Item Int)
  (prev_return (for_int (mk-pack 40 (mk-item 5))))
)
(assert (= (size input) 40))
(assert (= program_5 (as Crash (Item Int))))
(check-sat)
(get-model)
(pop)
;
