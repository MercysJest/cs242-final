;############################### CORE FUNCTIONS ###############################
;
(define-fun get_index_int ((vec (Item (Vector Int))) (index (Item Int))) (Item Int)
  (ite (or (= index (as Crash (Item Int))) (= vec (as Crash (Item (Vector Int))))) 
    (as Crash (Item Int)) 
    (ite (or (>= (value index) (size (value vec))) (< (value index) 0))
      (as Crash (Item Int))
      (mk-item (select (data (value vec)) (value index)))
    )
  )
)
(define-fun if_int ((condition (Item Bool)) (true_int (Item Int)) 
                    (false_int (Item Int))) (Item Int)
  (ite (or (= condition (as Crash (Item Bool))) 
        (= true_int (as Crash (Item Int))) (= false_int (as Crash (Item Int))))
    (as Crash (Item Int))
    (ite (value condition)
      true_int
      false_int
    )
  )
)
;(define-fun mk_vec ((first (Item Int)) (second (Item Int))) (Item (Vector Int))
;    ((declare-const a (Array Int))
;     (assert (= (select a 0) (value first)))
;     (assert (= (select a 1) (value second)))
;     (mk-item (mk-vec 2 a))
;    )
;)
(declare-fun mk_vec ((first (Item Int)) (second (Item Int))) ((Item (Vector Int))))
(assert (forall ((x (Item Int)) (y (Item Int)))
        (=> (and (not (= x (as Crash (Item Int)))) (not (= y (as Crash (Item Int)))))
        (and (= (select (data (value (mk_vec x y))) 0) (value x))
             (= (select (data (value (mk_vec x y))) 1) (value y))
             (= 2 (size (value (mk_vec x y)))) ))
    )
)
;
