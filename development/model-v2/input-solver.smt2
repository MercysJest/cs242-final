;############################### INPUT SOLVER ###############################
;
(push)
(echo "############ PROGRAM 6 (ATTEMPTING TO FIND CRASH) ############")
(define-fun body_statement ((prev (Item Int)) (vec (Vector Int))) (Item Int)
  (get_index_int (mk-item vec) prev)
)
(define-fun-rec for_int ((status (Packet Int)) (vec (Vector Int))) (Packet Int) 
  (ite (= (prev_return status) (as Crash (Item Int))) 
    (mk-pack -1 (as Crash (Item Int)))
    (ite (<= 0 (curr_idx status))
     (for_int (mk-pack (- (curr_idx status) 1) (body_statement (prev_return status) vec)) vec)
     status
    )   
  )
)
(define-fun program_3 ((vec (Vector Int))) (Item Int)
  (prev_return (for_int (mk-pack 1 (mk-item 0)) vec))
)
(declare-const input (Vector Int))
(assert (= (size input) 7))
(assert (= (program_3 input) (as Crash (Item Int))))
(check-sat)
(get-model)
(pop)
;
(push)
(echo "############ PROGRAM 4 (ATTEMPTING TO FIND CRASH) ############")
(define-fun-rec for_int ((status (Packet Int)) (body (Array (Item Int) (Item Int)))) (Packet Int) 
  (ite (= (prev_return status) (as Crash (Item Int))) 
    (mk-pack -1 (as Crash (Item Int)))
    (ite (<= 0 (curr_idx status))
     (for_int (mk-pack (- (curr_idx status) 1) (select body (prev_return status))) body)
     status
    )   
  )
)
(declare-const input (Vector Int))
(define-fun body_statement ((prev (Item Int))) (Item Int)
  (get_index_int (mk-item input) prev)
)
(declare-const for_body (Array (Item Int) (Item Int)))
(define-fun program_3 () (Item Int)
  (prev_return (for_int (mk-pack 7 (mk-item 1)) for_body))
)
(assert (= (size input) 7))
(assert (forall ((inputs (Item Int))) (= (body_statement inputs) (select for_body inputs))))
(assert (= program_3 (as Crash (Item Int))))
(check-sat)
(get-model)
(pop)
;
(push)
(echo "############ PROGRAM 1 (ATTEMPTING TO FIND CRASH) ############")
(define-fun program_1 ((vec (Vector Int))) (Item Int)
  (get_index_int (mk-item vec) (get_index_int (mk-item vec) (mk-item 0)))
)
(declare-const input (Vector Int))
(assert (= (size input) 2))
(assert (forall ((idx Int)) (>= (select (data input) idx) 0)))
(assert (= (program_1 input) (as Crash (Item Int))))
(check-sat)
(get-model)
(pop)
;
(push)
(echo "############ PROGRAM 2 (ATTEMPTING TO FIND CRASH) ############")
(define-fun program_2 ((vec (Vector Int))) (Item Int)
  (div_int (get_index_int (mk-item vec) (mk-item 0)) 
           (get_index_int (mk-item vec) (mk-item 1))
  )
)
(declare-const input (Vector Int))
(assert (= (size input) 2))
(assert (forall ((idx Int)) (>= (select (data input) idx) 0)))
(assert (= (program_2 input) (as Crash (Item Int))))
(check-sat)
(get-model)
(pop)
;
(push)
(echo "############ PROGRAM 3 (ATTEMPTING TO FIND CRASH) ############")
(define-fun program_1 ((vec (Vector Int))) (Item Int)
  (if_int (mk-item false)
    (get_index_int (mk-item vec) (get_index_int (mk-item vec) (mk-item 0)))
    (get_index_int (mk-item vec) (get_index_int (mk-item vec) (mk-item 1)))
  )
)
(declare-const input (Vector Int))
(assert (= (size input) 2))
(assert (forall ((idx Int)) (>= (select (data input) idx) 0)))
(assert (= (program_1 input) (as Crash (Item Int))))
(check-sat)
(get-model)
(pop)
;
(push)
(echo "############ PROGRAM 5 (ATTEMPTING TO FIND CRASH) ############")
(declare-const input (Vector Int))
(define-fun body_statement ((prev (Item Int))) (Item Int)
  (get_index_int (mk-item input) prev)
)
(define-fun-rec for_int ((status (Packet Int))) (Packet Int) 
  (ite (= (prev_return status) (as Crash (Item Int))) 
    (mk-pack -1 (as Crash (Item Int)))
    (ite (<= 0 (curr_idx status))
     (for_int (mk-pack (- (curr_idx status) 1) (body_statement (prev_return status))))
     status
    )   
  )
)
(define-fun program_3 () (Item Int)
  (prev_return (for_int (mk-pack 7 (mk-item 5))))
)
(assert (= (size input) 7))
(assert (= program_3 (as Crash (Item Int))))
(check-sat)
(get-model)
(pop)
;
